* Интро
Графические инструменты, позволяющие рисовать графики.

* Реализация

Для отрисовки и сохранения изображения используем библиотеку zpng.

#+NAME: _libs
#+BEGIN_SRC lisp :noweb yes :tangle graphics.lisp
  (ql:quickload "clx")
  (ql:quickload "zpng")
  (ql:quickload "png-read")

  <<_globals1>>
#+END_SRC

Каждое изображение изначально представляется как пятимерный массив:
ширина, высота, цвета RGB и альфа-канал. На данный момент программа может
работать только с изображениями ~truecolor-alpha~ - т.е. цветными
изображениями, содержащими альфа-канал: он показывает, насколько
нарисованная картинка будет прозрачной (максимальное значение 255
означает, что изображение не прозрачное, 0 означает, что полностью
прозрачное).

Создаем дефолтный пятимерный массив и указываем путь, по которому будем
его сохранять.

#+NAME: _globals1
#+BEGIN_SRC lisp :noweb yes
  (defparameter *test-image-path* "./test.png")
  (defparameter *default-width* 400)
  (defparameter *default-height* 300)
  (defparameter *default-array* (zpng:data-array (make-instance 'zpng:png
                                                                :color-type :truecolor-alpha
                                                                :width *default-width*
                                                                :height *default-height*)))

  <<_globals2>>
#+END_SRC

Нужно корректно обрабатывать ошибки - например, если юзер попытается
получить черно-белый график (т.е. попытается использовать неподдерживаемй
формат изображения), попытается нарисовать точку или оси X и Y, выходящие
за пределы массива изображения.

Так же для удобства напишем функцию, которая будет принимать имя функции,
в которой произошла ошибка, и строку, которую необходимо вывести.

#+NAME: _globals2
#+BEGIN_SRC lisp :noweb yes

  (defparameter *expected-truecolor-alpha-error*
    "WRONG IMAGE FORMAT: expected truecolor-alpha")

  (defparameter *coordinates-error*
    "WRONG COORDINATES: coordinates outside the array")

  (defparameter *too-long-axes-error*
    "TOO-LONG-AXES: axes length is too big!")

  ;; Печатает сообщение об ошибке
  ;; Принимает имя функции, в которой произошла ошибка,  и строку, которую надо вывести
  (defun print-error (func-name string)
    (format t "~A: ~A ~%" func-name string))

  <<_write_to_array>>
  <<_write_background_color_trucolor>>
  <<_write_straight_line>>
  <<_write_axises>>
  <<_write_divs_on_axises>>
  <<_write_points>>
  <<_bresenham_algorithm>>
  <<_write_any_line>>
  <<_generate_graphic>>
  <<_save_png>>
  <<_cnt>>
  <<_generate_corona_graphic_desease>>
#+END_SRC

Теперь можно реализовывать функции, которые совершают различные
манипуляции с массивом изображения, отрисовывая с нем график.

Важно: у координаты X точка 0.0 находится в левом нижнем углу, в то время
как у координаты Y точка 0.0 находится в верхнем левом углу:
т.е. координата Y растет сверху вниз. Это надо учитывать при заполнении
массива изображения, потому что в противном случае все будет вверх
ногами.

Операция заполнения пикселя массива изображения цветами RGB будет
повторяться постоянно, поэтому вынесем ее в макрос:

#+NAME: _write_to_array
#+BEGIN_SRC lisp :noweb yes

  ;; Макрос позволяет записать в пиксель, расположенный в массиве
  ;; по координатам X и Y значение RGB. Эта операция будет часто повторяться,
  ;; поэтому вынесена в макрос.
  (defmacro write-to-array (array x y r g b)
    `(setf (aref ,array ,y ,x 0) ,r
           (aref ,array ,y ,x 1) ,g
           (aref ,array ,y ,x 2) ,b
           (aref ,array ,y ,x 3) 255))

  ;; (macroexpand-1 '(write-to-array *default-array* 1 2 255 0 0))
#+END_SRC

Теперь с использованием этой операции легче определять остальные функции
записи в массив.

Сначала определим заполнение массива заданным фоновым цветом, заполняются
все пиксели.

#+NAME: _write_background_color_trucolor
#+BEGIN_SRC lisp :noweb yes

  ;; заполняет массив фоновым цветом
  (defun write-background-color-trucolor (array r g b)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      (if (= format 4)
          (do ((x 0 (incf x)))
              ((= x width))
            (do ((y 0 (incf y)))
                ((= y hight))
              (write-to-array array x y r g b)))
          (print-error 'write-background-color-trucolor
                       ,*expected-truecolor-alpha-error*))))


  ;; (write-background-color-trucolor *default-array* 0 255 0 )
  ;; (save-png (array-dimension *default-array* 0)
  ;;           (array-dimension *default-array* 1)
  ;;           "./test.png"
  ;;           *default-array*)
#+END_SRC

Теперь можно реализовать функцию, которая будет отрисовывать прямую
линию - горизонтальную или вертикальную - через две заданные точки.
При этом мы помним, что у оси Y отсчет ведется из левого верхнего угла
изображения.

Это означает, что если мы хотим отрисовать вертикальную линию от нижнего
левого угла до левого верхнего (именно в таком порядке), нужно думать,
что в нижнем левом углу у координаты Y будет максимальное значение, а в
верхнем - минимальное. И задавать две точки, исходя из этого.

Если, например, у нас есть изображения 100x300, то чтоб отрисовать линиую
от нижнего левого угла до верхнего левого угла, надо указать две точки
( 0 . 100) (0 . 0), если указать из в обратном порядке, то при попытке
отрисовать это, функция, декрементируя координату Y получит отрицательный
индекс массива.

#+NAME: _write_straight_line
#+BEGIN_SRC lisp :noweb yes

  (defun write-straight-line (array x0 y0 x1 y1 r g b)
    ;; (format t "write-straight-line rgb ~A ~A ~A ~%" r g b)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      (if (or (<= y1 hight)
              (>= x1 width))
          (print-error 'write-straight-line
                       ,*coordinates-error*)
          (if (not (= format 4))
              (print-error 'write-straight-line
                           ,*expected-truecolor-alpha-error*)
              (if (= x0 x1)
                  (do ((y y0 (decf y)))
                      ((= y y1))
                    (write-to-array array x0 y r g b))
                  (do ((x x0 (incf x)))
                      ((= x x1))
                    (write-to-array array x y0 r g b)))))))
#+END_SRC

Имея функцию, которая отрисовывает прямые, можно реализовать функцию,
которая отрисует оси X и Y для графика. Для этого нужно только задать
длину этих осей
[TODO:gmm] От длины можно исбавиться и сделать по умолчанию.

Чтоб оси не шли по краю изображения, высчитаем точки для их начала в
завиисмости от размера изображения - чтоб оси были хорошо видны,
достаточно сделать отступ слева в 10% от размера изображения.

#+NAME: _write_axises
#+BEGIN_SRC lisp :noweb yes

  ;; Отрисовывает оси X и Y
  ;; PARAMS
  ;; - массив изображения
  ;; - длина осей x и y в пикселях
  ;; - цвет в формате RGB
  (defun write-axises (array x-axis-length y-axis-length r g b)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      ;; чтоб не рисовать от края изображения, высчитываем отступ
      ;; в 10% от границы изображения
      (let* ((x0 (* ( floor width 100) 10))
             (y0 (* ( floor hight 100) 90))
             (x1 (+ x0 x-axis-length))
             (y1 (- y0 y-axis-length)))
        (if (or (< y1 0) (> x1 width))
            (print-error 'write-axises *too-long-axes-error*)
            (if (not (= format 4))
                (print-error
                 'write-axises *expected-truecolor-alpha-error*)
                (progn
                  ;; отрисовываем ось Y
                  (write-straight-line array x0 y0 x0 y1 r g b)
                  ;; отрисовываем ось X
                  (write-straight-line array x0 y0 x1 y0 r g b)))))))
#+END_SRC

Так же нужно задать деления на осях - иначе не понятно, что будет
обозначать сам график.
Чтоб это сделать, нужно просто задать длину осей и кол-во делений,
которые мы хотим разместить на оси - по умолчанию на обеих осях будет
одинаковое кол-во делений. А функция сама посчитает, как
равномерно их распределить по каждой из осей.

Функция возвращает список, который отображает координаты деления по
осям - в теории это может понадобиться, чтоб нанести точки графика точно
над осями.
Список возвращаемых координат состоит из двух подсписков. Каждый из этих
подсписков содержит в себе ассоциативные списка с координатами
деления.
Т.е. вернется значение, например ( ( (1.2) (3.4) ) ( (5.6) (7.8) ) ), где
подсписок  ( (1.2) (3.4) ) содержит в себе координаты деления оси Y, а
второй то же самое для оси X. В паре координат координата X идет первой.

#+NAME: _write_divs_on_axises
#+BEGIN_SRC lisp :noweb yes

  ;; Рисует заданное кол-во делений на осях, самостоятельно высчитывая размер
  ;; делений и рассояние между ними
  ;; # PARAMS: #
  ;; - массив изображения
  ;; - длина осей в пикселях
  ;; - цвет для делений (задается RGB)
  ;; - кол-во делений
  ;; # RETURN VALUE: #
  ;; возвращает список, состоящий из 2х подсписков
  ;; первый подсписок содержит в себе список координат, отображающих делений на оси X
  ;; второй подсписок содержит в себе аналогичный список для делений по оси Y
  (defun write-divs-on-axises (array x-axis-length y-axis-length r g b divs)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      (let* ((start-x (* ( floor width 100) 10))
             (start-y (* ( floor hight 100) 90))
             (divs-y-pixels (floor y-axis-length divs))
             (divs-x-pixels (floor x-axis-length divs))
             (divs-size (* ( floor width 100) 2))
             (y-divs-list '())
             (x-divs-list '()))
        ;; (format t "divs-size ~A ~%" divs-size)
        (if (or (< (- start-y y-axis-length) 0)
                (> (+ start-x x-axis-length) width))
            (print-error 'write-divs-on-axises *too-long-axes-error*)
            (if (= format 4)
                (progn
                  ;; двигаемся по оси x слева направо
                  ;; рисуя еделния через каждые n пикселей
                  (do ((x start-x (+ x divs-x-pixels)))
                      ((>= x (+ start-x x-axis-length)))
                    ;; рисуем деления длины n на оси x
                    ;; координата x не меняяется
                    (setf x-divs-list (append x-divs-list
                                              (list (cons x start-y))))
                    (do ((y start-y (incf y)))
                        ((= y (+ start-y divs-size)))
                      (write-to-array array x y r g b)))

                  ;; двигаемся по оси Y, двигаясь сверху вниз
                  ;; и рисуя через каждые n пикселейни деления
                  (do ((y start-y (- y divs-y-pixels)))
                      ((<= y (- start-y y-axis-length)))
                    ;; рисуем деления длины n на оси y
                    ;; координата Y не меняется
                    (setf y-divs-list (append y-divs-list
                                              (list (cons start-x y))))
                    (do ((x start-x (decf x)))
                        ((= x (- start-x divs-size)))
                      (write-to-array array x y r g b)))
                  (values x-divs-list y-divs-list))
                (print-error 'write-divs-on-axises *expected-truecolor-alpha-error*))))))

  ;; (defun write-divs-on-axises-test()
  ;;   (write-background-color-trucolor *default-array* 255 255 255)
  ;;   (write-axises *default-array* 110 110 54 98 23)
  ;;   (write-divs-on-axises *default-array* 110 110 200 13 20 10)
  ;;   (save-png (array-dimension *default-array* 0)
  ;;             (array-dimension *default-array* 1)
  ;;             "./test.png"
  ;;             *default-array*))

  ;; (write-divs-on-axises-test)
#+END_SRC

Теперь можно реализовать функцию, которая отрисует все точки на графе,
приняв список, состоящий из списокв вида (1 . 2).

[TODO:gmm] Эта функция пока нигде не используется, но может пригодться в
будущем.

#+NAME: _write_points
#+BEGIN_SRC lisp :noweb yes

  ;; Отрисовывает точки на графе
  ;; # PARAMS #
  ;; - массив изображения
  ;; - ассоциативный (!) список координат, где car подсписка - координата X
  ;; - цвет в формате RGB, которым отрисовываются точки
  (defun write-points (array points-list r g b)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      (if (< format 4)
          (print-error 'write-points *expected-truecolor-alpha-error*)
          (write-points-rec array points-list hight width r g b))))

  (defun write-points-rec (array points-list hight width r g b)
    (if (null points-list)
        'done
        (let ((x (caar points-list))
              (y (cdar points-list)))
          (if (or (>= x width)
                  (>= y hight))
              (print-error 'write-points-rec *coordinates-error*)
              (progn
                (write-to-array array x y r g b)
                (write-points-rec array
                                  (cdr points-list) hight width r g b))))))


  ;; (defun test-write-points-rec()
  ;;   (write-background-color-trucolor *default-array* 255 255 255)
  ;;   (multiple-value-bind (l1 l2)
  ;;       (write-divs-on-axises *default-array* 110 110 255 255 255 10)
  ;;     (write-points *default-array* l1 0 0 0 )
  ;;     (write-points *default-array* l2 0 0 0 ))
  ;;   (save-png (array-dimension *default-array* 0)
  ;;             (array-dimension *default-array* 1)
  ;;             "./test.png"
  ;;             *default-array*))
  ;; (test-write-points-rec)

#+END_SRC

И теперь возникает вопрос: как соединить точки на графе, которые не лежат
на одной прямой?
Ответ: алгоритм Брезенхема.

Есть две точки с координатами (x0 y0) и (x1 y1), между которыми мы хотим
провести линию. Короткая суть алгоритма: берется координата x0. К ней в
цикле прибавляем в сторону конца будущего отрезка. На каждом шаге вычисляется ошибка —
расстояние между реальной координатой Y в этом месте и ближайшей ячейкой
сетки. Если ошибка не превышает половину высоты ячейки, то она
заполняется.

- вычисляем угловой коэффициент (y1 — у0)/(x1 — x0)
- значение ошибке в точке начальной точке отрезка (x0 y0) принимается
  равным 0

Начало цикла:
- отрисовывается первая "ячейка" (пиксель и т.д.)
- прибавляем к текущему значению ошибки угловой коэффициент
- если ошибка < 0.5, то заполняется пиксель (ячейка) (x0+1, у0)
- если ошибка > 0.5, то заполняется пиксель (x0+1, у0+1), из значения
  ошибки вычистается единицы

Повторяем цикл до тех пор, пока (x0 y0) и (x1 y1) не станут
равны. Т.е. пока не достигнем конечной точки.

Проблема состоит в том, что такой алгоритм может соединять точки только
такие точки, где P0 лежит ниже и левее P1 - т.е. график растет снизу
вверх слева направо.

Но что если график нисходящий? А если мы хотим отрисовать восходящий
график, но не слева направо, а с права налево - для человека это будет
все равно выглядеть как нисходящий график, просто меняется способ его
рисования. В этом случае мы обычно входим в бесконечный цикл, либо вообще
пытаемся делить на ноль при высчиывании угла, потому что два точки
оказались на одной прямой по оси Х.

Поэтому дотюним этот алгоритм.
Во-первых, если две точки лежат на одной прямой, то мы вызовем
~write-straight-line~, которая отрисует эту прямую.

А во вторых, мы пропишем работу в случае, если у нас получился
отрицательный угловой коэффициент - он появляется, если мы пытаемся
отрисовать восходящий график справа налево.
Если угловой коффициент отрицательный, но при этом больше или равен -0.5,
то мы отрисуем следующую точку на (x0-1, y0). Если же угловой коэффициент
меньше -0.5 (т.е. -0.6, -5.0 и т.д.), то мы:
- прибавляем к коэффициенту единицу
- следующую точку отрисовываем на (x0-1, y0+1).

Теперь спрашивается, а затем вообще рисовать такой странный график,
который растет справа налево? Мы же фактически рисуем нисходящий график с
обратного конца, ерунда же.

Во-первых, мы должны иметь возможность соеинить две любые точки
Во-вторых, нужно вспомнить, что ноль у координаты Y находится в правом
левом углу изображения.

Допустим, мы хотим нарисовать какой-то график, написали процедуру,
которая генерирует точки на графике. Генерируя точки, все время помня о
"перевернутой" оси Y - это слишком "больно" для пользователя. Поэтому нам
нужно создать иллюзию того, что ось Y у нас "нормальная" и растет не
сверху вниз, а снизу вверх.

Как это сделать? Отрисовать график зеркально в массиве, когда изображение
будет сохранено, мы получим правильный график. Поэтому и приходится таким
странным способом рисовать некоторые графики.

[TODO:gmm] текущая модификация алгоритма по-прежнему не позволяет
соединять две любые точки, но возможно это связано не с самим алгоритмом,
сколько с масштабированием графика. Алгоритм заполняет цветом ячейки,
которые в нашем случае являются пикселями - т.е. ячейками массива.

Например, алгоритм не сможет соединить точка (2 . 100) и (3 . 400),
потому что эти точки находятся близко друг от друга по оси X и при этом
далеко по оси Y. Если не масштабировать график, увеличив его, чтоб между
этими точками физически оказалось больше пикселей, то нет никакой
возможности их соединить линией.

В таких случаях алгоритм просто входит в бесконечный цикл или пытается
выйти за границы массива.

#+NAME: _bresenham_algorithm
#+BEGIN_SRC lisp :noweb yes

  ;; Усовершенствованная реализация алгоритма Брезенхайма - позволяет соединять 2 точки,
  ;; если:
  ;; - они лежат на одной прямой
  ;; - точка А находится ближке к точке 0.0, чем точка В (т.е. график растет из ниженго
  ;; левого угла в правый верхний
  ;; - точка В находится выше по оси Y точки А и при этом точка А  находится дальше по
  ;; оси X (т.е. график нисходящий из левого верхнего угла в правый нижний)
  (defun bresenham-algorithm (array x0 y0 x1 y1 r g b)
    (bresenham-algorithm-rec array x0 y0 x1 y1 0 r g b))

  (defun bresenham-algorithm-rec (array x0 y0 x1 y1 error-rate r g b)
    ;; (format t "bresenham-algorithm: x0 ~A y0 ~A x1 ~A y1 ~A ~%" x0 y0 x1 y1)
    ;; достигли искомой точки
    (cond ((and (= x0 x1) (= y0 y1)) 'done)
          ;; точки лежат на одной прямой по оси Y
          (( = x0 x1) (if ( > y0 y1)
                          (progn
                            (write-straight-line array x0 y0 x1 y1 r g b)
                            'done)
                          (progn
                            (write-straight-line array x0 y1 x1 y0 r g b)
                            'done)))
          ;; точки лежат на одной прямой по оси X
          (( = y0 y1) (if ( > x0 x1)
                          (progn
                            (write-straight-line array x1 y0 x0 y1 r g b)
                            'done)
                          (progn
                            (write-straight-line array x0 y0 x1 y1 r g b)
                            'done)))
          (t
           ;; точки не лежат на одной прямой
           (let* ((angle (* (/ (- y1 y0) (- x1 x0)) 1.0))
                  (new-error-rate (+ error-rate angle)))
             ;; (format t "angle ~A ~%" angle)
             (write-to-array array x0 y0 r g b)
             ;; угол положительный?
             (if ( >= new-error-rate 0)
                 (if (<= new-error-rate 0.5)
                     (bresenham-algorithm-rec array (incf x0) y0 x1 y1 new-error-rate r g b)
                     (bresenham-algorithm-rec array (incf x0) (incf y0) x1 y1
                                              (- new-error-rate 1) r g b))
                 ;; угол отрицательный (т.е. рисуем нисходящий график)
                 (if (>= new-error-rate -0.5)
                     (bresenham-algorithm-rec array (decf x0) y0 x1 y1 new-error-rate r g b)
                     (bresenham-algorithm-rec array (decf x0) (incf y0) x1 y1
                                              (+ new-error-rate 1) r g b)))))))

  ;; (defun test-bresenham-algorithm()
  ;;   (write-background-color-trucolor *default-array* 255 255 255)
  ;;   (bresenham-algorithm *default-array* 10 3 2 10 255 0 0)
  ;;   (save-png (array-dimension *default-array* 1)
  ;;             (array-dimension *default-array* 0)
  ;;             "./test.png"
  ;;             *default-array*))
  ;; (test-bresenham-algorithm)
#+END_SRC

В идеале нам нужно добиться эффекта, когда любые две точки можно
соединить, и при этом юзер не должен думать, находятся они на одной
прямой или надо пользовать алгоритмом Брезенхема и т.д.

Поэтому реализуем функцию, которая сама будет выбирать, какую функцию
следует вызвать для соединения двух точек в зависимости от того, как они
расположены.

#+NAME: _write_any_line
#+BEGIN_SRC lisp :noweb yes

  ;; Рисует ЛЮБУЮ линию от точки А до точки В
  (defun write-any-line (array x0 y0 x1 y1 r g b)
    ;; (format t "write-any-line: x0 ~A x1 ~A ~%" x0 x1)
    (if (or (= x0 x1)
            (= y0 y1))
        ;; точки лежат на одной прямой
        (write-straight-line array x0 y0 x1 y1 r g b)
        ;; точки НЕ лежат на одной прямой
        (if (< y1 y0)
            (bresenham-algorithm array x1 y1 x0 y0 r g b)
            (bresenham-algorithm array x0 y0 x1 y1 r g b))))

#+END_SRC

Теперь пишем функцию, которая будет генерировать весь график:
т.е. принимать список точек, заполнять изображение фоновым цветом,
рисовать оси, наносить точки на график и соединять их.

#+NAME: _generate_graphic
#+BEGIN_SRC lisp :noweb yes

  (defun generate-graphic (array list-of-points r g b)
    (destructuring-bind (hight width format)
        (array-dimensions array)
      (if (not (= format 4))
          (print-error 'generate-graphic
                       ,*expected-truecolor-alpha-error*)
          (let* ((x-axis-length (* (/ width 100) 80))
                 (y-axis-length (* (/ hight 100) 80))
                 (y-axis-end-point (* ( floor hight 100) 90))
                 (x-axis-start-point (* ( floor width 100) 10)))
            (write-background-color-trucolor array 255 255 255)
            (write-axises array x-axis-length y-axis-length 0 0 0)
            (write-divs-on-axises array x-axis-length y-axis-length 0 0 0
                                  (length list-of-points))
            (generate-graphic-rec array list-of-points y-axis-end-point
                                  x-axis-start-point r g b)))))

  (defun generate-graphic-rec (array list-of-points y-axis-end-point x-axis-start-point
                               r g b)
    ;; (format t "y-axis-end-point ~A~%" y-axis-end-point)
    (if (= (length list-of-points) 1)
        'done
        (let* ((point1 (car list-of-points))
               (point2 (cadr list-of-points))
               (x1 (+ x-axis-start-point (car point1)))
               (y1 (- y-axis-end-point (cdr point1)))
               (x2 (+ (car point2) x-axis-start-point))
               (y2 (- y-axis-end-point (cdr point2))))
          ;; (format t "y1 ~A y2 ~A~%" y1 y2)
          (write-any-line array x1 y1 x2 y2 r g b)
          (generate-graphic-rec array (cdr list-of-points) y-axis-end-point
                                x-axis-start-point r g b))))

#+END_SRC

Теперь остается только сохранить изображение.

#+NAME: _save_png
#+BEGIN_SRC lisp :noweb yes

  ;; сохраняет массив в виде изображения
  (defun save-png (width height pathname-str image
                   &optional (color-type :truecolor-alpha))
    (let* ((png (make-instance 'zpng:png :width width :height height
                               :color-type color-type))
           (vector (make-array ;; displaced vector - need copy for save
                    (* height width (zpng:samples-per-pixel png))
                    :displaced-to image :element-type '(unsigned-byte 8))))
      ;; Тут применен потенциально опасный трюк, когда мы создаем
      ;; объект PNG без данных, а потом добавляем в него данные,
      ;; используя неэкспортируемый writer.
      ;; Это нужно чтобы получить третью размерность массива,
      ;; который мы хотим передать как данные и при этом
      ;; избежать создания для этого временного объекта
      (setf (zpng::%image-data png) (copy-seq vector))
      (zpng:write-png png pathname-str)))
#+END_SRC

Проводим эксперимент для генерации графика по заболеваемости
коронавирусом. Изображение должно иметь 2 оси и сам
график. заболеваеомсти.

Сначала пишем функцию, которая сгенерирует точки на графике. Нужно
указать вероятность заражение, изначальное кол-во здоровых людей, лимит
больных, которого мы хотим достичь, и равные отрезки времени.

Допустим, можно выяснить, как быстро заразится 50% от заданного кол-ва
людей, если шанс заразиться 1.8% за 3 недели.

#+NAME: _cnt
#+BEGIN_SRC lisp :noweb yes

  (defun count-rec (chance healthy infected limit period time list-of-points)
    (if (<= (- limit infected) 0.001)
        list-of-points
        (let* ((new-infected (floor (* (/ healthy 100) chance) 1.0))
               (still-healthy (- healthy new-infected)))
          (setf list-of-points (append list-of-points (list
                                                       (cons (+ time period)
                                                             (+ new-infected infected)))))
          (count-rec chance still-healthy (+ new-infected infected)
                     limit period (+ period time) list-of-points))))


  (defun cnt (chance amount limit period)
    (count-rec chance amount period limit period 0 (list (cons 0 0))))
#+END_SRC

#+NAME: _generate_corona_graphic_desease
#+BEGIN_SRC lisp :noweb yes

  (defun generate-corona-graphic-desease (array chance healthy infected-limit period)
    (let ((list-of-points (cnt chance healthy infected-limit period)))
      (generate-graphic array list-of-points 34 65 23)
      (save-png (array-dimension array 0)
                (array-dimension array 1)
                "./test.png"
                array)))

  ;; (generate-corona-graphic-desease *default-array* 1.879 300 150 3)
#+END_SRC

* Что предстоит еще сделать

- масштабирование графиков
- возможность соединять две любые точки на грфике
- подписывать оси, деления на них и т.д. - т.е. содать свои собственные
  шрифты, которые тоже будут масштабироваться
